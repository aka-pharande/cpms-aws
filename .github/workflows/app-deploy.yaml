name: Deploy App

on:
  push:
    branches: [main]
    paths:
      - 'k8s/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::786193448664:role/github.cpms.admin
          aws-region: us-east-1

      - name: Download Terraform Outputs from S3
        run: |
          mkdir -p tf-outputs
          aws s3 cp s3://s3-cpms-state-dev-useast1/cpms/tf_outputs.json tf-outputs/tf_outputs.json

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Parse Terraform Outputs
        id: parse
        run: |
          CLUSTER_NAME=$(jq -r '.eks_cluster_name.value' tf-outputs/tf_outputs.json)
          REGION=$(jq -r '.eks_cluster_region.value' tf-outputs/tf_outputs.json)
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "REGION=$REGION" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: aws eks --region $REGION update-kubeconfig --name $CLUSTER_NAME

      # Apply your app Deployments/Services/Ingress
      - name: Deploy k8s Manifests
        run: kubectl apply -f k8s/

      # Requires a file k8s/le-cluster-issuers.yaml with REPLACE_ME_EMAIL placeholder
      - name: Apply ClusterIssuers (optional)
        if: ${{ hashFiles('k8s/le-cluster-issuers.yaml') != '' }}
        env:
          ACME_EMAIL: aka.pharande@gmail.com
        run: |
          set -e
          if [ -z "$ACME_EMAIL" ]; then
            echo "ACME_EMAIL not set; skipping issuers apply."
            exit 0
          fi
          # give cert-manager CRDs a moment (first-time bootstrap)
          sleep 15
          sed "s/REPLACE_ME_EMAIL/${ACME_EMAIL}/g" k8s/le-cluster-issuers.yaml > k8s/le-cluster-issuers.rendered.yaml
          kubectl apply -f k8s/le-cluster-issuers.rendered.yaml
          kubectl get clusterissuers

      # Wait for ingress-nginx controller Service to get a hostname
      - name: Get Ingress Controller Hostname
        id: ingress-lb
        run: |
          set -e
          # Wait up to ~5 minutes (60 * 5s) for the LB to provision on first deploy
          for i in {1..60}; do
            HOSTNAME=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' || true)
            if [ -n "$HOSTNAME" ]; then
              echo "LB_ENDPOINT=$HOSTNAME" >> $GITHUB_ENV
              echo "Public Hostname: $HOSTNAME"
              exit 0
            fi
            echo "Waiting for ingress-nginx controller hostname..."
            sleep 5
          done
          echo "Ingress controller hostname not ready in time" >&2
          exit 1

      - name: Wait for TLS certificate (optional)
        continue-on-error: true
        run: |
          # Adjust namespace/name if different
          kubectl -n default wait --for=condition=Ready certificate/cpms-ui-tls --timeout=500s || true
          kubectl -n default get certificate cpms-ui-tls || true

      # Azure Login to update DNS
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Update CNAME to point to the Ingress controller LB
      - name: Create/Update Azure DNS CNAME Record
        env:
          AZURE_DNS_ZONE: "aakankshapharande.com"
          AZURE_RESOURCE_GROUP: "rg-aka-domain"
          CNAME_NAME: "cpms"
        run: |
          az network dns record-set cname set-record \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --zone-name "$AZURE_DNS_ZONE" \
            --record-set-name "$CNAME_NAME" \
            --cname "$LB_ENDPOINT"
