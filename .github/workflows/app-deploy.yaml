name: Deploy App

on:
  push:
    branches: [main]
    paths:
      - 'k8s/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::786193448664:role/github.cpms.admin
          aws-region: us-east-1

      - name: Download Terraform Outputs from S3
        run: |
          aws s3 cp s3://s3-cpms-state-dev-useast1/cpms/tf_outputs.json tf-outputs/tf_outputs.json

      - name: Parse Terraform Outputs
        id: parse
        run: |
          CLUSTER_NAME=$(jq -r '.eks_cluster_name.value' tf-outputs/tf_outputs.json)
          REGION=$(jq -r '.eks_cluster_region.value' tf-outputs/tf_outputs.json)
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
          echo "REGION=$REGION" >> $GITHUB_ENV

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Update kubeconfig
        run: aws eks --region $REGION update-kubeconfig --name $CLUSTER_NAME

      # 1. Deploy Secret
      - name: Deploy Secret
        run: kubectl apply -f k8s/cpms-secret.yaml

      # 2. Deploy DB (separate stage for easy removal later)
      - name: Deploy DB
        run: kubectl apply -f k8s/cpms-db.yaml

      # 3. Wait for DB to be ready
      - name: Wait for DB to initialize
        run: sleep 90

      # 4. Deploy Services
      - name: Deploy Services
        run: kubectl apply -f k8s/cpms-services.yaml

      # 5. Get cpms-ui LoadBalancer IP/Hostname
      - name: Get cpms-ui Service Endpoint
        id: get-lb
        run: |
          # Try to get external IP, fallback to hostname
          HOSTNAME=$(kubectl get svc cpms-ui -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "LB_ENDPOINT=$HOSTNAME" >> $GITHUB_ENV
          echo "Public Hostname: $HOSTNAME"

      # 6. Azure Login
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 7. Create/Update CNAME Record in Azure DNS
      - name: Create/Update Azure DNS CNAME Record
        env:
          AZURE_DNS_ZONE: "aakankshapharande.com"
          AZURE_RESOURCE_GROUP: "rg-aka-domain"
          CNAME_NAME: "cpms"
        run: |
          az network dns record-set cname set-record \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --zone-name "$AZURE_DNS_ZONE" \
            --record-set-name "$CNAME_NAME" \
            --cname "$LB_ENDPOINT"